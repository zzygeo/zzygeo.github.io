{"meta":{"title":"西瓜🍉","subtitle":null,"description":"慢一点，才能快一点","author":"ZZY","url":"https://zzygeo.cn","root":"/"},"pages":[],"posts":[{"title":"github设置自己的域名","slug":"github设置自己的域名","date":"2021-01-20T08:30:55.000Z","updated":"2021-02-27T06:35:19.211Z","comments":true,"path":"2021/01/20/github设置自己的域名/","link":"","permalink":"https://zzygeo.cn/2021/01/20/github%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/","excerpt":"","text":"哈哈，上次整了一晚上的没整明白，今天两下就整好了，看来真的进步不错哈哈，至少看东西，解决问题更有耐心也更能看懂了。 1.购买域名我是买的阿里云的域名，如下图：域名解析如下： 2.github仓库设置域名地址在blog目录下的source文件下，创一个叫CNAME的无后缀文件，里面填入你的域名，比如我的 zzygeo.cn 如下图：如下图，主要是要设置博客上传分支的目录，以及更改你自己的域名（创建CNAME后自动生成），采用https加密。 到此就设置完成了！","categories":[],"tags":[]},{"title":"pcl+vs+cmake编译","slug":"pcl-vs-cmake编译","date":"2020-12-27T14:50:27.000Z","updated":"2021-02-27T06:59:32.996Z","comments":true,"path":"2020/12/27/pcl-vs-cmake编译/","link":"","permalink":"https://zzygeo.cn/2020/12/27/pcl-vs-cmake%E7%BC%96%E8%AF%91/","excerpt":"上一篇写的配置可能是最基础的，也是很麻烦，其实可以用cmake来偷个懒，这样就不用附加依赖性已经加入库目录和包含目录了。","text":"上一篇写的配置可能是最基础的，也是很麻烦，其实可以用cmake来偷个懒，这样就不用附加依赖性已经加入库目录和包含目录了。 1.软件准备1.All in one 安装包。 2.获取All in one 包对应得PDB文件包，用于后期单步调试。 3.安装Visual studio 2019编译器 4.cmake 其实源码包用不上，懒得改了，最复杂的方式就是源代码加第三方库进行配置，等我配置好了也会再一篇关于源码方式的配置。 2.链接pcl下载地址visual studio下载地址cmake下载地址 3.安装事项为了方便配置，pcl安装目录尽量默认，不默认后续添加目录需要选择对应的位置。 pcl安装请一定选择创建系统路径，visual studio和cmake安装位置随意，其他选项默认即可。 pcl安装完成后，请把下载的pcd文件解压，如下图： 将所有文件复制，安装到pcl下的BIN文件下 检查pcl安装目录下的 3rdParty-OpenNI2是否只有一个安装包（我的是这样），这可能是事先安装过SDK的原因，请卸载了重新安装在OpenNI2下，安装完成如下图： cmake 安装请选择添加到系统路径，没选的话也可以自己手动添加，添加的方式为cmake目录下bin文件 比如C:\\APP\\Cmake\\bin这样的形式。 4.关于Visual studio安装项目我安装了这些负载 5.环境配置右键我的电脑——高级系统设置-环境变量，在path选项下新建如下几项，根据你pcl安装的位置来： 比如我的：C:\\Program Files\\PCL 1.11.0\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\ToolsC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\Redist 在系统变量下，配置如下图：比如我的：C:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\ToolsC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\binC:\\Program Files\\PCL 1.11.0\\bin 6.cmake编译以管理员身份运行cmake-gui在你想要的文件下创建一个名为example的文件夹，然后在此目录下创建一个source和cmake_bin文件，比如我的： 在source里面创建一个cpp文件和CMakeLists.txt文件。CmakeLists.txt里写入以下内容： cmake_minimum_required(VERSION 2.6 FATAL_ERROR) project(test) find_package(PCL 1.4 REQUIRED) include_directories($&#123;PCL_INCLUDE_DIRS&#125;) link_directories($&#123;PCL_LIBRARY_DIRS&#125;) add_definitions($&#123;PCL_DEFINITIONS&#125;) add_executable (test test.cpp) target_link_libraries (test $&#123;PCL_LIBRARIES&#125;) 其中这个test就是你创建的测试代码的名字，请保持一致，如果你换别的名字，请把txt文件的名字也一起改了。我的如下： 测试代码请网上去找，我用的是上一篇文件里的（里面有个D盘文件的读取可能会报错，但只要能出彩色的那个图就算配置成功了）。 跟着步骤添加 点击Configure，选x64 再点击一次configure 点击Generate,出现Generating done. 找到cmake_bin底下的test_sln 打开。 将test设置为启动项，并调试。","categories":[{"name":"pcl","slug":"pcl","permalink":"https://zzygeo.cn/categories/pcl/"}],"tags":[{"name":"-pcl -visual studio","slug":"pcl-visual-studio","permalink":"https://zzygeo.cn/tags/pcl-visual-studio/"}]},{"title":"C++","slug":"CPP","date":"2020-12-19T10:01:10.000Z","updated":"2021-02-27T06:35:19.211Z","comments":true,"path":"2020/12/19/CPP/","link":"","permalink":"https://zzygeo.cn/2020/12/19/CPP/","excerpt":"","text":"写一些觉得能用上的C++代码： 将文本的数字读成数组： #include&lt;iostream&gt; #include&lt;fstream&gt; using namespace std; int main() &#123; const int txtRow = 201; const int txtColumn = 8; float txtData[txtRow][txtColumn]; ifstream infile; infile.open(&quot;C:\\\\APP\\\\C\\\\Project2\\\\测试数据.txt&quot;); for (int i = 0; i &lt; txtRow; i++) &#123; for (int j = 0; j &lt; txtColumn; j++) &#123; infile &gt;&gt; txtData[i][j]; &#125; &#125; infile.close(); return 0; &#125; 将文本的数字读成矩阵，需要第三方库Eigen。 #include&lt;iostream&gt; #include&lt;Eigen/Dense&gt; #include&lt;fstream&gt; #include&lt;cmath&gt; using namespace std; using namespace Eigen; MatrixXd ReadData(istream&amp; data, int a, int b) &#123; MatrixXd m_matrix(a, b); for (int i = 0; i &lt; a; i++) &#123; for (int j = 0; j &lt; b; j++) &#123; data &gt;&gt; m_matrix(i,j); &#125; &#125; return m_matrix; &#125; int main() &#123; const int row = 201; const int column = 8; ifstream infile(&quot;C:\\\\APP\\\\C\\\\Project2\\\\测试数据.txt&quot;, ios::in); if (!infile) &#123; return 0; &#125; MatrixXd m_matrix = ReadData(infile, row, column); return 0; &#125; 冒泡排序： #include&lt;iostream&gt; #include&lt;vector&gt; using namespace std; void display(vector&lt;int&gt; vec) &#123; for (int i = 0; i &lt; vec.size(); ++i) cout &lt;&lt; vec[i] &lt;&lt; &#39; &#39;; cout &lt;&lt; endl; &#125; void swap(int&amp; val1, int&amp; val2) &#123; int temp = val1; val1 = val2; val2 = temp; &#125; void bubble_sort(vector&lt;int&gt;&amp; vec) &#123; for (int ix = 0; ix &lt; vec.size(); ++ix) for (int jx = ix + 1; jx &lt; vec.size(); ++jx) if (vec[ix] &gt; vec[jx]) swap(vec[ix], vec[jx]); &#125; int main() &#123; int al[8] = &#123; 2,56,4,5,13,7,1,24 &#125;; vector&lt;int&gt; vec(al, al + 8); cout &lt;&lt; &quot;before sort: &quot;; display(vec); bubble_sort(vec); cout &lt;&lt; &quot;after sort: &quot;; display(vec); return 0; &#125; 关键在于swap 和 bubble_sort时，不仅要传值，也要传址，不然只是其值被复制了一份，成为了参数的局部性定义，当运行结束也就从“程序堆栈”里释放掉了，并没有关联起来。","categories":[],"tags":[]},{"title":"编译器","slug":"编译器","date":"2020-11-25T16:23:05.000Z","updated":"2021-02-27T06:57:48.497Z","comments":true,"path":"2020/11/26/编译器/","link":"","permalink":"https://zzygeo.cn/2020/11/26/%E7%BC%96%E8%AF%91%E5%99%A8/","excerpt":"鉴于在编译器的配置上花费了一些时间，在两台电脑上都进行了配置，想单独写一篇博客来介绍编译器。持续更新，现在用的是vscode 进行c以及python的使用，具体的链接如下：","text":"鉴于在编译器的配置上花费了一些时间，在两台电脑上都进行了配置，想单独写一篇博客来介绍编译器。持续更新，现在用的是vscode 进行c以及python的使用，具体的链接如下： vscode配置anaconda环境使用python强烈建议直接装一个anaconda全家桶，里面的库很多也很方便管理。2020/11/26更新，vscode for python读取文本总找不到，搜了很多博客也没解决，可能我太菜了，这个VSCODE真不太适合新手。。。 python还是直接pycharm或者jupyter吧，pycharm那点内存对我们搞机的不是简简单单嘛！！！vscode配置C语言环境","categories":[],"tags":[{"name":"-编译器","slug":"编译器","permalink":"https://zzygeo.cn/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"}]},{"title":"深度学习篇","slug":"深度学习篇","date":"2020-11-10T16:41:27.000Z","updated":"2021-02-27T06:55:37.417Z","comments":true,"path":"2020/11/11/深度学习篇/","link":"","permalink":"https://zzygeo.cn/2020/11/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AF%87/","excerpt":"这两天其实做了不少事，时间确实很短，今天和华为的hr小姐姐聊了一会，校招她说3月多就开始了，着实吓到我了，然后还给了我一些鼓励，另外值得高兴的是咨询羊哥的一些问题，他当天就回复了我，这我是没想到的。在这里希望明年的这个时候可以拿到一个不错的offer。","text":"这两天其实做了不少事，时间确实很短，今天和华为的hr小姐姐聊了一会，校招她说3月多就开始了，着实吓到我了，然后还给了我一些鼓励，另外值得高兴的是咨询羊哥的一些问题，他当天就回复了我，这我是没想到的。在这里希望明年的这个时候可以拿到一个不错的offer。 1.深度学习简介与其枯坐在房间里思考怎么设计一个识别猫的程序，不如利用人类肉眼在图像中识别猫的能力。我们可以收集一些已知包含猫与不包含猫的真实图像，然后我们的目标就转化成如何从这些图像入手得到一个可以推断出图像中是否有猫的函数。通俗来说，机器学习是一门讨论各式各样的适用于不同问题的函数形式，以及如何使用数据来有效地获取函数参数具体值的学科。深度学习是指机器学习中的一类函数，它们的形式通常为多层神经网络。近年来，仰仗着大数据集和强大的硬件，深度学习已逐渐成为处理图像、文本语料和声音信号等复杂高维度数据的主要方法，算力以及数据集的增长使得机器学习死灰复燃。 1.1机器学习与深度学习的关系机器学习研究如何使计算机系统利用经验改善性能。它是人工智能领域的分支，也是实现人工智能的一种手段。在机器学习的众多研究方向中，表征学习关注如何自动找出表示数据的合适方式，以便更好地将输入变换为正确的输出。深度学习是具有多级表示的表征学习方法。在每一级（从原始数据开始），深度学习通过简单的函数将该级的表示变换为更高级的表示。因此，深度学习模型也可以看作是由许多简单函数复合而成的函数。当这些复合的函数足够多时，深度学习模型就可以表达非常复杂的变换。深度学习可以逐级表示越来越抽象的概念或模式。以图像为例，它的输入是一堆原始像素值。深度学习模型中，图像可以逐级表示为特定位置和角度的边缘、由边缘组合得出的花纹、由多种花纹进一步汇合得到的特定部位的模式等。最终，模型能够较容易根据更高级的表示完成给定的任务，如识别图像中的物体。值得一提的是，作为表征学习的一种，深度学习将自动找出每一级表示数据的合适方式。因此，深度学习的一个外在特点是端到端的训练。也就是说，并不是将单独调试的部分拼凑起来组成一个系统，而是将整个系统组建好之后一起训练。比如说，计算机视觉科学家之前曾一度将特征抽取与机器学习模型的构建分开处理，像是Canny边缘探测和SIFT特征提取 曾占据统治性地位达10年以上，但这也就是人类能找到的最好方法了。当深度学习进入这个领域后，这些特征提取方法就被性能更强的自动优化的逐级过滤器替代了。除端到端的训练以外，我们也正在经历从含参数统计模型转向完全无参数的模型。当数据非常稀缺时，我们需要通过简化对现实的假设来得到实用的模型。当数据充足时，我们就可以用能更好地拟合现实的无参数模型来替代这些含参数模型。这也使我们可以得到更精确的模型，尽管需要牺牲一些可解释性。 1.2深度学习的资源吴恩达的课确实很好，但我更喜欢这种直接上手边看边做的方法，现在跟着花书挺好的，社区也很强大，在这里贴上链接，原书版以及pytorch版的链接。 pytorch原版 2.必要软件原书中说明已经很清楚了，因此在这里我只会放一些我使用中所碰见的问题。首先是anaconda的一些知识以及jupyter book的知识，链接如下： anacondajupyter_book 在我根据书中的内容安装miniconda以及jupyter book时，在第四步激活了,找不到命令,论坛里也找了找确实也有这个问题，有回答说不是在安装的文件下安装的anaconda。而我自己是直接在安装目录下 Git bash here的，没法用。我寻思是不是没管理员权限，直接搜索栏 cmd，以管理员身份运行。 cd C:\\d2l-zh #安装镜像的文件夹 conda activate gluon jupyter notebook 然后会让你输入一个密钥，在命令行中复制就行。到此这两个安装就算完成了。更多关于anaconda以及jupyter book的使用请看以上两个链接。","categories":[{"name":"DL","slug":"DL","permalink":"https://zzygeo.cn/categories/DL/"}],"tags":[{"name":"-deep learning","slug":"deep-learning","permalink":"https://zzygeo.cn/tags/deep-learning/"}]},{"title":"Unable to access 'https://gitee.com/自己的项目/': Could not resolve host: gitee.com问题的解决","slug":"Unable-to-access-https-gitee-com-自己的项目-Could-not-resolve-host-gitee-com问题的解决","date":"2020-10-22T17:28:36.000Z","updated":"2021-02-27T06:58:40.320Z","comments":true,"path":"2020/10/23/Unable-to-access-https-gitee-com-自己的项目-Could-not-resolve-host-gitee-com问题的解决/","link":"","permalink":"https://zzygeo.cn/2020/10/23/Unable-to-access-https-gitee-com-%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE-Could-not-resolve-host-gitee-com%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/","excerpt":"果然玩hexo报错是在所难免，就好像我已经长大，读研以后乃至以后得日子，可能总是繁琐常伴。今天在hexo d推到GITEE上时，报了错。","text":"果然玩hexo报错是在所难免，就好像我已经长大，读研以后乃至以后得日子，可能总是繁琐常伴。今天在hexo d推到GITEE上时，报了错。原因是由于爬梯子代理网络的问题，其实折腾了下。具体哪个步骤解决了这个问题，我也不是很清楚，这次做好记录方便以后继续更新把。 首先我是从这篇博客里查到了我的ip，然后ping了查到的ip，然后在system32\\drives\\etc\\hosts里添加了 IP gitee.com 然而这并没有继续运行成功。然后我有尝试1.管理员身份运行cmd2.输入 netsh winsock reset 3.重启 还有尝试命令行输入 git config --global --unset http.proxy git config --global --unset https.proxy 最后发现还是不行，结果我把第一步添加的IP gitee.com删了居然好了。 所以我觉得问题在以下原因，第一个是我没有在打开代理下hexo d,平时确实是没有注意这个问题，但关闭代理下好像有时候也成功过，但这个问题确实出在了代理的问题上。另外就是我的代理导致了无法上传上去，上述的两个操作我也不知道哪个解决了这个问题，毕竟我先添加了IP，然后再试了这两种清楚的。如果下次再出现这个问题，有了结果再继续补充。 2020/11/17他妈个头的，翻墙今天又部署不上去了，前面的用了也不好使，又试了一下这个更改DNS的方法成功了，链接在这","categories":[],"tags":[{"name":"-hexo","slug":"hexo","permalink":"https://zzygeo.cn/tags/hexo/"}]},{"title":"资源","slug":"资源","date":"2020-10-04T06:53:31.000Z","updated":"2021-02-27T06:53:23.139Z","comments":true,"path":"2020/10/04/资源/","link":"","permalink":"https://zzygeo.cn/2020/10/04/%E8%B5%84%E6%BA%90/","excerpt":"准备把一些资源都放在这个博客下，持续更新，有需要得自取。 1.Linux学习笔记链接","text":"准备把一些资源都放在这个博客下，持续更新，有需要得自取。 1.Linux学习笔记链接 2.cloud compare中文版使用手册链接 3.深度学习吴恩达深度学习课程 吴恩达课程配套科目 吴恩达深度学习笔记 4.壁纸地址","categories":[],"tags":[{"name":"-资源","slug":"资源","permalink":"https://zzygeo.cn/tags/%E8%B5%84%E6%BA%90/"}]},{"title":"PCL-1-11-Visual-Studio-2019-配置","slug":"PCL-1-11-Visual-Studio-2019-配置","date":"2020-10-04T04:22:26.000Z","updated":"2021-02-27T07:01:07.591Z","comments":true,"path":"2020/10/04/PCL-1-11-Visual-Studio-2019-配置/","link":"","permalink":"https://zzygeo.cn/2020/10/04/PCL-1-11-Visual-Studio-2019-%E9%85%8D%E7%BD%AE/","excerpt":"1.软件准备1.All in one 安装包。 2.获取All in one 包对应得PDB文件包，用于后期单步调试。","text":"1.软件准备1.All in one 安装包。 2.获取All in one 包对应得PDB文件包，用于后期单步调试。3.获取PCL源码包 4.安装Visual studio 2019编译器 2.链接pcl下载地址visual studio下载地址 3.安装事项为了方便配置，pcl安装目录尽量默认，不默认后续添加目录需要选择对应的位置。 pcl安装请一定选择创建系统路径，visual studio和cmake安装位置随意，其他选项默认即可。 pcl安装完成后，请把下载的pcd文件解压，如下图： 将所有文件复制，安装到pcl下的BIN文件下 检查pcl安装目录下的 3rdParty-OpenNI2是否只有一个安装包（我的是这样），这可能是事先安装过SDK的原因，请卸载了重新安装在OpenNI2下，安装完成如下图： 4.关于Visual studio安装项目我安装了这些负载 5.环境配置右键我的电脑——高级系统设置-环境变量，在path选项下新建如下几项，根据你pcl安装的位置来： 比如我的：C:\\Program Files\\PCL 1.11.0\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\ToolsC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\Redist 在系统变量下，配置如下图：比如我的：C:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\ToolsC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\binC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\binC:\\Program Files\\PCL 1.11.0\\bin 6.配置打开visual studio，新建一个空项目如图： 在release下创建属性表（如果是DEBUG版本请在DEBUG下创建） 切换到解决方案资源管理器，右键-添加-新建项 添加C++文件 接下来配置： 包含目录下添加，建议手点：C:\\Program Files\\PCL 1.11.0\\include\\pcl-1.11C:\\Program Files\\PCL 1.11.0\\3rdParty\\Boost\\include\\boost-1_73C:\\Program Files\\PCL 1.11.0\\3rdParty\\Eigen\\eigen3C:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\includeC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\includeC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\include\\vtk-8.2C:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\Include 库目录添加：C:\\Program Files\\PCL 1.11.0\\libC:\\Program Files\\PCL 1.11.0\\3rdParty\\Boost\\libC:\\Program Files\\PCL 1.11.0\\3rdParty\\FLANN\\libC:\\Program Files\\PCL 1.11.0\\3rdParty\\Qhull\\libC:\\Program Files\\PCL 1.11.0\\3rdParty\\VTK\\libC:\\Program Files\\PCL 1.11.0\\3rdParty\\OpenNI2\\Lib 接下来配置： 在预处理器定义处添加：BOOST_USE_WINDOWS_HNOMINMAX_CRT_SECURE_NO_DEPRECATE 在项目属性表（Project_one）和release下创建得属性表（test_one）中把所有选项里得SDL检查全改成否，如下图： 7.附加依赖项将PCL 1.11.0\\3rdParty\\VTK\\lib和PCL 1.11.0\\lib这两个文件夹下的lib文件的release版本添加到附加依赖项中（DEBUG版本添加DEBUG类型文件） 文件名称我已经归类好了 release版本： pcl_common.libpcl_features.libpcl_filters.libpcl_io.libpcl_io_ply.libpcl_kdtree.libpcl_keypoints.libpcl_ml.libpcl_octree.libpcl_outofcore.libpcl_people.libpcl_recognition.libpcl_registration.libpcl_sample_consensus.libpcl_search.libpcl_segmentation.libpcl_stereo.libpcl_surface.libpcl_tracking.libpcl_visualization.libvtkChartsCore-8.2.libvtkCommonColor-8.2.libvtkCommonComputationalGeometry-8.2.libvtkCommonCore-8.2.libvtkCommonDataModel-8.2.libvtkCommonExecutionModel-8.2.libvtkCommonMath-8.2.libvtkCommonMisc-8.2.libvtkCommonSystem-8.2.libvtkCommonTransforms-8.2.libvtkDICOMParser-8.2.libvtkDomainsChemistry-8.2.libvtkDomainsChemistryOpenGL2-8.2.libvtkdoubleconversion-8.2.libvtkexodusII-8.2.libvtkexpat-8.2.libvtkFiltersAMR-8.2.libvtkFiltersCore-8.2.libvtkFiltersExtraction-8.2.libvtkFiltersFlowPaths-8.2.libvtkFiltersGeneral-8.2.libvtkFiltersGeneric-8.2.libvtkFiltersGeometry-8.2.libvtkFiltersHybrid-8.2.libvtkFiltersHyperTree-8.2.libvtkFiltersImaging-8.2.libvtkFiltersModeling-8.2.libvtkFiltersParallel-8.2.libvtkFiltersParallelImaging-8.2.libvtkFiltersPoints-8.2.libvtkFiltersProgrammable-8.2.libvtkFiltersSelection-8.2.libvtkFiltersSMP-8.2.libvtkFiltersSources-8.2.libvtkFiltersStatistics-8.2.libvtkFiltersTexture-8.2.libvtkFiltersTopology-8.2.libvtkFiltersVerdict-8.2.libvtkfreetype-8.2.libvtkGeovisCore-8.2.libvtkgl2ps-8.2.libvtkglew-8.2.libvtkGUISupportMFC-8.2.libvtkhdf5_hl-8.2.libvtkhdf5-8.2.libvtkImagingColor-8.2.libvtkImagingCore-8.2.libvtkImagingFourier-8.2.libvtkImagingGeneral-8.2.libvtkImagingHybrid-8.2.libvtkImagingMath-8.2.libvtkImagingMorphological-8.2.libvtkImagingSources-8.2.libvtkImagingStatistics-8.2.libvtkImagingStencil-8.2.libvtkInfovisCore-8.2.libvtkInfovisLayout-8.2.libvtkInteractionImage-8.2.libvtkInteractionStyle-8.2.libvtkInteractionWidgets-8.2.libvtkIOAMR-8.2.libvtkIOAsynchronous-8.2.libvtkIOCityGML-8.2.libvtkIOCore-8.2.libvtkIOEnSight-8.2.libvtkIOExodus-8.2.libvtkIOExport-8.2.libvtkIOExportOpenGL2-8.2.libvtkIOExportPDF-8.2.libvtkIOGeometry-8.2.libvtkIOImage-8.2.libvtkIOImport-8.2.libvtkIOInfovis-8.2.libvtkIOLegacy-8.2.libvtkIOLSDyna-8.2.libvtkIOMINC-8.2.libvtkIOMovie-8.2.libvtkIONetCDF-8.2.libvtkIOParallel-8.2.libvtkIOParallelXML-8.2.libvtkIOPLY-8.2.libvtkIOSegY-8.2.libvtkIOSQL-8.2.libvtkIOTecplotTable-8.2.libvtkIOVeraOut-8.2.libvtkIOVideo-8.2.libvtkIOXML-8.2.libvtkIOXMLParser-8.2.libvtkjpeg-8.2.libvtkjsoncpp-8.2.libvtklibharu-8.2.libvtklibxml2-8.2.libvtklz4-8.2.libvtklzma-8.2.libvtkmetaio-8.2.libvtkNetCDF-8.2.libvtkogg-8.2.libvtkParallelCore-8.2.libvtkpng-8.2.libvtkproj-8.2.libvtkpugixml-8.2.libvtkRenderingAnnotation-8.2.libvtkRenderingContext2D-8.2.libvtkRenderingContextOpenGL2-8.2.libvtkRenderingCore-8.2.libvtkRenderingExternal-8.2.libvtkRenderingFreeType-8.2.libvtkRenderingGL2PSOpenGL2-8.2.libvtkRenderingImage-8.2.libvtkRenderingLabel-8.2.libvtkRenderingLOD-8.2.libvtkRenderingOpenGL2-8.2.libvtkRenderingVolume-8.2.libvtkRenderingVolumeOpenGL2-8.2.libvtksqlite-8.2.libvtksys-8.2.libvtktheora-8.2.libvtktiff-8.2.libvtkverdict-8.2.libvtkViewsContext2D-8.2.libvtkViewsCore-8.2.libvtkViewsInfovis-8.2.libvtkzlib-8.2.lib DEBUG版本： pcl_commond.libpcl_featuresd.libpcl_filtersd.libpcl_io_plyd.libpcl_iod.libpcl_kdtreed.libpcl_keypointsd.libpcl_mld.libpcl_octreed.libpcl_outofcored.libpcl_peopled.libpcl_recognitiond.libpcl_registrationd.libpcl_sample_consensusd.libpcl_searchd.libpcl_segmentationd.libpcl_stereod.libpcl_surfaced.libpcl_trackingd.libpcl_visualizationd.libvtkChartsCore-8.2-gd.libvtkCommonColor-8.2-gd.libvtkCommonComputationalGeometry-8.2-gd.libvtkCommonCore-8.2-gd.libvtkCommonDataModel-8.2-gd.libvtkCommonExecutionModel-8.2-gd.libvtkCommonMath-8.2-gd.libvtkCommonMisc-8.2-gd.libvtkCommonSystem-8.2-gd.libvtkCommonTransforms-8.2-gd.libvtkDICOMParser-8.2-gd.libvtkDomainsChemistry-8.2-gd.libvtkDomainsChemistryOpenGL2-8.2-gd.libvtkdoubleconversion-8.2-gd.libvtkexodusII-8.2-gd.libvtkexpat-8.2-gd.libvtkFiltersAMR-8.2-gd.libvtkFiltersCore-8.2-gd.libvtkFiltersExtraction-8.2-gd.libvtkFiltersFlowPaths-8.2-gd.libvtkFiltersGeneral-8.2-gd.libvtkFiltersGeneric-8.2-gd.libvtkFiltersGeometry-8.2-gd.libvtkFiltersHybrid-8.2-gd.libvtkFiltersHyperTree-8.2-gd.libvtkFiltersImaging-8.2-gd.libvtkFiltersModeling-8.2-gd.libvtkFiltersParallel-8.2-gd.libvtkFiltersParallelImaging-8.2-gd.libvtkFiltersPoints-8.2-gd.libvtkFiltersProgrammable-8.2-gd.libvtkFiltersSelection-8.2-gd.libvtkFiltersSMP-8.2-gd.libvtkFiltersSources-8.2-gd.libvtkFiltersStatistics-8.2-gd.libvtkFiltersTexture-8.2-gd.libvtkFiltersTopology-8.2-gd.libvtkFiltersVerdict-8.2-gd.libvtkfreetype-8.2-gd.libvtkGeovisCore-8.2-gd.libvtkgl2ps-8.2-gd.libvtkglew-8.2-gd.libvtkGUISupportMFC-8.2-gd.libvtkhdf5_hl-8.2-gd.libvtkhdf5-8.2-gd.libvtkImagingColor-8.2-gd.libvtkImagingCore-8.2-gd.libvtkImagingFourier-8.2-gd.libvtkImagingGeneral-8.2-gd.libvtkImagingHybrid-8.2-gd.libvtkImagingMath-8.2-gd.libvtkImagingMorphological-8.2-gd.libvtkImagingSources-8.2-gd.libvtkImagingStatistics-8.2-gd.libvtkImagingStencil-8.2-gd.libvtkInfovisCore-8.2-gd.libvtkInfovisLayout-8.2-gd.libvtkInteractionImage-8.2-gd.libvtkInteractionStyle-8.2-gd.libvtkInteractionWidgets-8.2-gd.libvtkIOAMR-8.2-gd.libvtkIOAsynchronous-8.2-gd.libvtkIOCityGML-8.2-gd.libvtkIOCore-8.2-gd.libvtkIOEnSight-8.2-gd.libvtkIOExodus-8.2-gd.libvtkIOExport-8.2-gd.libvtkIOExportOpenGL2-8.2-gd.libvtkIOExportPDF-8.2-gd.libvtkIOGeometry-8.2-gd.libvtkIOImage-8.2-gd.libvtkIOImport-8.2-gd.libvtkIOInfovis-8.2-gd.libvtkIOLegacy-8.2-gd.libvtkIOLSDyna-8.2-gd.libvtkIOMINC-8.2-gd.libvtkIOMovie-8.2-gd.libvtkIONetCDF-8.2-gd.libvtkIOParallel-8.2-gd.libvtkIOParallelXML-8.2-gd.libvtkIOPLY-8.2-gd.libvtkIOSegY-8.2-gd.libvtkIOSQL-8.2-gd.libvtkIOTecplotTable-8.2-gd.libvtkIOVeraOut-8.2-gd.libvtkIOVideo-8.2-gd.libvtkIOXML-8.2-gd.libvtkIOXMLParser-8.2-gd.libvtkjpeg-8.2-gd.libvtkjsoncpp-8.2-gd.libvtklibharu-8.2-gd.libvtklibxml2-8.2-gd.libvtklz4-8.2-gd.libvtklzma-8.2-gd.libvtkmetaio-8.2-gd.libvtkNetCDF-8.2-gd.libvtkogg-8.2-gd.libvtkParallelCore-8.2-gd.libvtkpng-8.2-gd.libvtkproj-8.2-gd.libvtkpugixml-8.2-gd.libvtkRenderingAnnotation-8.2-gd.libvtkRenderingContext2D-8.2-gd.libvtkRenderingContextOpenGL2-8.2-gd.libvtkRenderingCore-8.2-gd.libvtkRenderingExternal-8.2-gd.libvtkRenderingFreeType-8.2-gd.libvtkRenderingGL2PSOpenGL2-8.2-gd.libvtkRenderingImage-8.2-gd.libvtkRenderingLabel-8.2-gd.libvtkRenderingLOD-8.2-gd.libvtkRenderingOpenGL2-8.2-gd.libvtkRenderingVolume-8.2-gd.libvtkRenderingVolumeOpenGL2-8.2-gd.libvtksqlite-8.2-gd.libvtksys-8.2-gd.libvtktheora-8.2-gd.libvtktiff-8.2-gd.libvtkverdict-8.2-gd.libvtkViewsContext2D-8.2-gd.libvtkViewsCore-8.2-gd.libvtkViewsInfovis-8.2-gd.libvtkzlib-8.2-gd.lib 8.程序测试#include &lt;pcl/visualization/cloud_viewer.h&gt; #include &lt;iostream&gt; #include &lt;pcl/io/io.h&gt; #include &lt;pcl/io/pcd_io.h&gt; int user_data; void viewerOneOff(pcl::visualization::PCLVisualizer&amp; viewer) &#123; viewer.setBackgroundColor(1.0, 0.5, 1.0); pcl::PointXYZ o; o.x = 1.0; o.y = 0; o.z = 0; viewer.addSphere(o, 0.25, &quot;sphere&quot;, 0); std::cout &lt;&lt; &quot;i only run once&quot; &lt;&lt; std::endl; &#125; void viewerPsycho(pcl::visualization::PCLVisualizer&amp; viewer) &#123; static unsigned count = 0; std::stringstream ss; ss &lt;&lt; &quot;Once per viewer loop: &quot; &lt;&lt; count++; viewer.removeShape(&quot;text&quot;, 0); viewer.addText(ss.str(), 200, 300, &quot;text&quot;, 0); //FIXME: possible race condition here: user_data++; &#125; int main() &#123; pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::Ptr cloud(new pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;); pcl::io::loadPCDFile(&quot;D:\\\\Microsoft Visual Studio 10.0\\\\Projects\\\\pcl\\\\pcl\\\\my_point_cloud.pcd&quot;, *cloud); pcl::visualization::CloudViewer viewer(&quot;Cloud Viewer&quot;); //blocks until the cloud is actually rendered viewer.showCloud(cloud); //use the following functions to get access to the underlying more advanced/powerful //PCLVisualizer //This will only get called once viewer.runOnVisualizationThreadOnce(viewerOneOff); //This will get called once per visualization iteration viewer.runOnVisualizationThread(viewerPsycho); while (!viewer.wasStopped()) &#123; //you can also do cool processing here //FIXME: Note that this is running in a separate thread from viewerPsycho //and you should guard against race conditions yourself... user_data++; &#125; return 0; &#125; 测试结果：","categories":[{"name":"pcl","slug":"pcl","permalink":"https://zzygeo.cn/categories/pcl/"}],"tags":[{"name":"-pcl -visual studio","slug":"pcl-visual-studio","permalink":"https://zzygeo.cn/tags/pcl-visual-studio/"}]},{"title":"hexo d 出现错误的用户名和密码的解决办法","slug":"hexo-d-出现错误的用户名和密码的解决办法","date":"2020-10-02T05:27:01.000Z","updated":"2021-02-27T06:35:19.211Z","comments":true,"path":"2020/10/02/hexo-d-出现错误的用户名和密码的解决办法/","link":"","permalink":"https://zzygeo.cn/2020/10/02/hexo-d-%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"在windows搜索栏输入：控制面板然后点击： 点进去就可以更改用户名和密码了","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zzygeo.cn/categories/hexo/"}],"tags":[]},{"title":"新电脑上部署hexo","slug":"新电脑上部署hexo","date":"2020-10-02T05:07:29.000Z","updated":"2021-02-27T06:54:42.286Z","comments":true,"path":"2020/10/02/新电脑上部署hexo/","link":"","permalink":"https://zzygeo.cn/2020/10/02/%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%83%A8%E7%BD%B2hexo/","excerpt":"1. 安装必要软件安装 Git 客户端安装 node JS","text":"1. 安装必要软件安装 Git 客户端安装 node JS 2. 拷贝源文件将初始电脑上个人博客文件夹下这几个文件夹拷到当前新电脑的准备设置的博客路径下。 _config.yml package.json scaffolds/ source/ themes/ 3. 安装hexo在 cmd 下输入下面指令安装 hexo: npm install -g hexo 4. 在新博客路径下，安装三方依赖库npm install npm install hexo-deployer-git --save //文章部署到 git 的模块 npm install 主题需要的插件 千万别hxeo init，不然你就拉在裤子里了！！！ 5. GITHUB/gitee 添加 SSH KEYS在GitHub/gitee的ssh keys那里再添加一个当前电脑的环境生成的key，但是可别把原来的电脑删掉了啊。首先在本地创建 SSH Keys: ssh-keygen -t rsa -C “xxxx@xxxx.com“ 后面的邮箱即为 github/gitee注册邮箱，也是你登录Github的邮箱（其实无关紧要，只是为了辨识生成的用户名），之后会要求确认路径和输入密码，一路回车就行。成功的话会在git bash页面下看到生成的 .ssh文件夹路径，进去，打开 id_rsa.pub，复制里面的key（全选）即可。然后拷贝到 Github/gitee 的 SSH Keys(这里要添加一个新的)然后在终端中，我们再次测试下公钥有没有添加成功： ssh -T git@gitee.com 会弹出确认命令，输入yes,会弹出你的名字等等，会出现： Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 然后： hexo g hexo s hexo d","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zzygeo.cn/categories/hexo/"}],"tags":[{"name":"-hexo迁移","slug":"hexo迁移","permalink":"https://zzygeo.cn/tags/hexo%E8%BF%81%E7%A7%BB/"}]},{"title":"Youtube视频下载","slug":"Youbute视频下载","date":"2020-09-26T04:57:33.000Z","updated":"2021-02-27T06:58:25.443Z","comments":true,"path":"2020/09/26/Youbute视频下载/","link":"","permalink":"https://zzygeo.cn/2020/09/26/Youbute%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/","excerpt":"Youtube视频下载&lt;/p&gt; 1.4K视频下载下载地址","text":"Youtube视频下载&lt;/p&gt; 1.4K视频下载下载地址 2.油猴插件脚本参考我的这篇博客油猴插件 3.1080p下载下载地址 4.视频字幕下载下载地址版权限制，目前下载为VTT格式，需要在Subtitle Edit里将VTT转为SRT格式。 5.Subtitle Edit(vvt-srt)下载地址可以VTT2SRT SRT2VTT,有强大的字幕编辑功能。 6.Arctime(制作内嵌字幕视频)下载地址","categories":[{"name":"Youbute","slug":"Youbute","permalink":"https://zzygeo.cn/categories/Youbute/"}],"tags":[{"name":"-Youtube","slug":"Youtube","permalink":"https://zzygeo.cn/tags/Youtube/"}]},{"title":"浏览器以及插件","slug":"浏览器以及插件","date":"2020-09-26T04:03:26.000Z","updated":"2021-02-27T06:57:18.520Z","comments":true,"path":"2020/09/26/浏览器以及插件/","link":"","permalink":"https://zzygeo.cn/2020/09/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A5%E5%8F%8A%E6%8F%92%E4%BB%B6/","excerpt":"1.浏览器：Google chrome请大家百度自行下载，想去官网下载请看我的这篇博客去翻墙","text":"1.浏览器：Google chrome请大家百度自行下载，想去官网下载请看我的这篇博客去翻墙主要想介绍的是一些需要更改的选项 更改搜索引擎，默认的是google的，这里需要我们改成百度的，不然你每次就只能先翻墙才能搜索。在设置里找到搜素引擎，默认设置为百度。 在翻墙以后，浏览器将会打开代理模式，如下图：但是在你不翻墙的时候，他也是这样设置，这就会导致你使用浏览器的时候，搜东西出现连接不上服务器的问题。这时候你需要设置成这样： 2.google浏览器的一些好用插件注意：在你下载插件的时候，必须先翻墙，不然你无法打开拓展程序商店不多BB直接整活先找到插件搜索地方，如下图： 1.Adblock Plus 有效去除浏览器广告 2.Awesome Screenshot 可以录频，包括桌面的，浏览器页面的等等，需要先注册账号，录频后的视频会放在你的账户里，可以自行下载。 3.Free Download manager这是一款强大的下载器，速度快而且方便，速度比迅雷更快，更关键的是在你翻墙以后，迅雷的扩展程序有些国外的资源他是不支持下载的，但是这个可以。下载器官网如下： 在安装完成后，打开设置选项，可以关联扩展，如图： 当然你也可以直接到应用商店下载： 建议先下载下载器再去下载google扩展程序，这样就可以自动关联了，正好我想下一个腾讯视频，效果如图：每次下载你可以自行选择下载地址，很方便管理你的应用。 4.Google翻译不多介绍了 5.Imagus imagus主要就是在你鼠标停留在图片上时，自动放大图片，比如在你购物时： 6.Infinity 新标签页 它可以更换你的浏览器壁纸，可以添加常用网站，看起来很简洁很舒服。效果如下： 7.one Tab 当你在打开数十个网页时，图片变小看不清网页信息，如何切换到你想要的页面的，one tab就可以实现，效果如下： 8.tampermonkey油猴是一个强大的工具，其中内置了很多的功能，甚至油猴有插件可以直接拦截百度网盘，将百度网盘的资源以free download 下载。（想到百度网盘原来几K让冲超级会员的嘴脸就想骂他，虽然在上半年提供可以勾选通道，但是也只有100-200k，属实垃圾）。这次我就以一个YOUTUBE视频下载插件为例介绍一下。 打开油猴页面，搜素插件如图，安装插件：之后在我打开一个YOUTUBE视频，可以看到出现了下载链接： 9.关灯看视频在你晚上看B站，看YOUTUBE视频时，可以选择，效果如图： 10.fatkun图片下载可以一键下载多张图片","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://zzygeo.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[{"name":"-浏览器推荐 -浏览器插件","slug":"浏览器推荐-浏览器插件","permalink":"https://zzygeo.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"}]},{"title":"梯子","slug":"梯子","date":"2020-09-26T03:57:04.000Z","updated":"2021-02-27T06:35:19.211Z","comments":true,"path":"2020/09/26/梯子/","link":"","permalink":"https://zzygeo.cn/2020/09/26/%E6%A2%AF%E5%AD%90/","excerpt":"","text":"名称：meilink羊圈下载地址：页面浏览： 自己根据需求去购买相应的套餐，一般来说最便宜的一档已经够用了","categories":[{"name":"VPN","slug":"VPN","permalink":"https://zzygeo.cn/categories/VPN/"}],"tags":[{"name":"-梯子","slug":"梯子","permalink":"https://zzygeo.cn/tags/%E6%A2%AF%E5%AD%90/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2020-09-24T06:30:05.000Z","updated":"2021-02-27T07:03:17.592Z","comments":true,"path":"2020/09/24/markdown语法/","link":"","permalink":"https://zzygeo.cn/2020/09/24/markdown%E8%AF%AD%E6%B3%95/","excerpt":"1.标题# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 注：# 和「标题文字」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 2. 粗体、斜体、删除线*我是斜体* **我是粗体** ***我是粗斜体*** ~~我是删除线~~ 显示效果：我是斜体我是粗体我是粗斜体我是删除线","text":"1.标题# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 注：# 和「标题文字」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 2. 粗体、斜体、删除线*我是斜体* **我是粗体** ***我是粗斜体*** ~~我是删除线~~ 显示效果：我是斜体我是粗体我是粗斜体我是删除线 3. 表格| 学号 | 姓名 | 分数| | :- | -: | :-: | | 小明 | 男 | 75 | | 小红 | 女 | 79 | | 小陆 | 男 | 92 | 显示效果： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 4. 有序列表1. 文本1 2. 文本2 3. 文本3 显示效果： 文本1 文本2 文本3 5. 无序列表- 文本1 - 文本2 - 文本3 显示效果： 文本1 文本2 文本3 6. 行内代码块C语言里的函数 `scanf()` 怎么使用？ 显示效果：C语言里的函数 scanf() 怎么使用？ 7. 分割线可以在一行中用三个以上的减号、底线来建立一个分隔线，行内不能有其他内容。 ___ 显示效果： 8. 超链接语法格式为链接文字，[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性为可选。title属性的效果是鼠标悬停在链接上会出现指定的title文字。链接地址与链接标题前有一个空格。 欢迎来到多加香菜的博客 显示效果：欢迎来到多加香菜的博客 9. 图片语法格式为，图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和超链接中的链接标题一样，表示鼠标悬停与图片上时出现的文字。 图片Alt 和 图片Titlee 都是可选的。 10. 引用&gt; 一级引用 &gt;&gt; 二级引用 &gt;&gt;&gt; 三级引用 &gt;&gt;&gt;&gt; 四级引用 显示效果： 一级引用 二级引用 三级引用 四级引用 11. 空格你好&amp;nbsp;&amp;nbsp;&amp;nbsp;jeffery 显示效果你好&nbsp;&nbsp;&nbsp;zzy 12. 字体、字号、颜色&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt; &lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt; &lt;font color=#0099ff size=23 face=&quot;黑体&quot;&gt;我是黑体，颜色#0099ff 字号23&lt;/font&gt; 我是黑体字 我是微软雅黑 我是黑体，颜色#0099ff 字号23&lt;/p&gt;","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://zzygeo.cn/tags/markdown/"}]},{"title":"关于入门博客的一些事","slug":"关于入门博客的一些事","date":"2020-09-24T05:05:18.000Z","updated":"2021-02-27T06:57:33.081Z","comments":true,"path":"2020/09/24/关于入门博客的一些事/","link":"","permalink":"https://zzygeo.cn/2020/09/24/%E5%85%B3%E4%BA%8E%E5%85%A5%E9%97%A8%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/","excerpt":"这算是我的第二个博客了，第一部署在Github上，都是基于hexo来搭建的，不过部署在在Github上有这样的问题：","text":"这算是我的第二个博客了，第一部署在Github上，都是基于hexo来搭建的，不过部署在在Github上有这样的问题： 上传到GitHub上很慢，毕竟是国外的服务器。 有时候Github会抽风，很多时候国内没法访问，必须得上梯子才能上去，还是很不方便的。 所以在用魔改butterfly主题后，直接给我hexo整崩了（主要还是太菜，看不懂大佬写的东西），在此非常感谢那些无名英雄，我们只是走在了别人走好的路上。 这次部署在gitee（码云）上，还是很方便的，一个是访问速度确实快，但是需要手动去gitee pages服务更新。第二个是gitee现在的用户也很多了，也见到一些写了几年博客的大佬从github转到了gitee。我是在8月初入坑hexo的，当时什么都不懂，对着B站看视频，别人干啥我跟着干。现在还算有了一些进步吧，好歹能看懂一些config文件了，毕竟在我搞崩hexo后，直接重装了系统重头再来，为此我熬了2天的夜。 这次选择的是比较简洁的yilia主题，开发者已经不再提供更新了，后续有基于yilia的plus版本以及各种进阶，在csdn直接就可以搜到。 话有些多，有些没逻辑。但是写博客的初心呢，有以下的一些原因： 写东西是一个回顾的过程，在解决一个问题以后，以后很有可能继续碰见，当你头皮发麻时，想到你以前完美的记录这个过程，这个问题自然会迎刃而解。 好的博客可以给你找工作加分，一个hr如何去辨识出哪些人是善于思考，善于总结的人，我想博客就是一个很好的媒介，也是了解你具有哪些技术的手段。 博客可以锻炼文笔，虽然我文字功底很烂，但是初衷是希望可以通俗易懂，希望我写的东西可以帮你解决了一个甚至一些问题。 在这两天看了这么多博客以后，有好有差，当然博主可能只是记录而已，他能看懂就行，但我希望自己以后写的东西可以仔细一些。 更新：yilia是什么（laji），butterfly是真的香，干掉重来。","categories":[],"tags":[{"name":"感想","slug":"感想","permalink":"https://zzygeo.cn/tags/%E6%84%9F%E6%83%B3/"},{"name":"心得","slug":"心得","permalink":"https://zzygeo.cn/tags/%E5%BF%83%E5%BE%97/"}]}],"categories":[{"name":"pcl","slug":"pcl","permalink":"https://zzygeo.cn/categories/pcl/"},{"name":"DL","slug":"DL","permalink":"https://zzygeo.cn/categories/DL/"},{"name":"hexo","slug":"hexo","permalink":"https://zzygeo.cn/categories/hexo/"},{"name":"Youbute","slug":"Youbute","permalink":"https://zzygeo.cn/categories/Youbute/"},{"name":"浏览器","slug":"浏览器","permalink":"https://zzygeo.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"VPN","slug":"VPN","permalink":"https://zzygeo.cn/categories/VPN/"}],"tags":[{"name":"-pcl -visual studio","slug":"pcl-visual-studio","permalink":"https://zzygeo.cn/tags/pcl-visual-studio/"},{"name":"-编译器","slug":"编译器","permalink":"https://zzygeo.cn/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"},{"name":"-deep learning","slug":"deep-learning","permalink":"https://zzygeo.cn/tags/deep-learning/"},{"name":"-hexo","slug":"hexo","permalink":"https://zzygeo.cn/tags/hexo/"},{"name":"-资源","slug":"资源","permalink":"https://zzygeo.cn/tags/%E8%B5%84%E6%BA%90/"},{"name":"-hexo迁移","slug":"hexo迁移","permalink":"https://zzygeo.cn/tags/hexo%E8%BF%81%E7%A7%BB/"},{"name":"-Youtube","slug":"Youtube","permalink":"https://zzygeo.cn/tags/Youtube/"},{"name":"-浏览器推荐 -浏览器插件","slug":"浏览器推荐-浏览器插件","permalink":"https://zzygeo.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"},{"name":"-梯子","slug":"梯子","permalink":"https://zzygeo.cn/tags/%E6%A2%AF%E5%AD%90/"},{"name":"markdown","slug":"markdown","permalink":"https://zzygeo.cn/tags/markdown/"},{"name":"感想","slug":"感想","permalink":"https://zzygeo.cn/tags/%E6%84%9F%E6%83%B3/"},{"name":"心得","slug":"心得","permalink":"https://zzygeo.cn/tags/%E5%BF%83%E5%BE%97/"}]}